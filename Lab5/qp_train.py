# -*- coding: utf-8 -*-
"""QP_train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uEHbslFwO_Wt8laxeChFv58xJ2-R3GIj
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.preprocessing import LabelEncoder
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import random

# Importing the dataset
dataset = pd.read_csv('2020_bn_nb_data.txt', sep="\t")
dataset.head()
X = dataset.drop('QP', axis=1)
y = dataset['QP']

X, y

X_encoded = X.copy()
label_encoders = {}

for column in X.columns:
        le = LabelEncoder()
        X_encoded[column] = le.fit_transform(X[column])
        label_encoders[column] = le

label_encoders

le_qp = LabelEncoder()
y_encoded = le_qp.fit_transform(y)
y_encoded, X_encoded

accuracies = []
detailed_reports = []
confusionM = []

print(X_encoded.dtypes)
y_encoded.dtype

n_iterations = 20

for iteration in range(n_iterations):
    shuffle_split = StratifiedShuffleSplit(n_splits=1, test_size=0.3, random_state=random.randint(0, 100))

    for train_index, test_index in shuffle_split.split(X_encoded, y_encoded):
        X_train, X_test = X_encoded.iloc[train_index], X_encoded.iloc[test_index]
        y_train, y_test = y_encoded[train_index], y_encoded[test_index]

        nb_classifier = GaussianNB()
        nb_classifier.fit(X_train, y_train)

        y_pred = nb_classifier.predict(X_test)

        accuracy = accuracy_score(y_test, y_pred)
        accuracies.append(accuracy)

        report = classification_report(y_test, y_pred, target_names=le_qp.classes_, output_dict=True)
        detailed_reports.append(report)

        c = confusion_matrix(y_test, y_pred)
        confusionM.append(c)

confusionM

detailed_reports

print("\nNaive Bayes Classifier Performance Summary:")
print(f"Number of Iterations: {n_iterations}")
print(f"Accuracy Statistics:")
print(f"Mean Accuracy: {np.mean(accuracies):.4f}")
print(f"Standard Deviation: {np.std(accuracies):.4f}")
print(f"Minimum Accuracy: {np.min(accuracies):.4f}")
print(f"Maximum Accuracy: {np.max(accuracies):.4f}")

